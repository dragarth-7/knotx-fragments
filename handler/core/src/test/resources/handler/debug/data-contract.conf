graph {
  id = ddasdafsdfsffsdf
  # single - a node that does some logic like a service invocation
  # composite - a node that internally represents a list of evaluated subgraphs
  type = single // single, composite
  # this is specific for a single node
  operation {
    type = action
    factory = http
  }
  label = A # Fetch user data
  # success - a node ends with the _success transition
  # error - a node ends with the _error transition or an exception is thrown
  # other - a node ends with some custom transition
  # unprocessed - a node is not used during graph evaluation
  # missing - a node is not configured, it appears when some custom transition is not handled or
  #           the last node in graph responds with the _error transition
  status = success // success, error, other, unprocessed, missing
  response {
    transition = _success
    invocations = ${simple-node-log}
  }
  on {
    _success = ${b-composite}
    _error = ${c-node}
  }
}

b-composite {
  id = wfwefwefewfwefwef
  type = composite
  # this is specific for a composite node
  subtasks = [
    ${b1-subgraph}, ${b2-subgraph}
  ],
  label = Invoke all B
  status = error
  response {
    transition = _error
    invocations = ${simple-node-log}
  }
  on {
    _success = ${e-node}
    _error = ${f-node}
  }
}

b1-subgraph {
  id = fwefwefewfwefwe
  type = single
  operation {
    type = action
    factory = http
  }
  label = B1
  status = success
  response {
    transition = _success
    invocations = ${simple-node-log}
  }
}

b2-subgraph {
  id = dwefewfewfewfewf
  type = single
  operation {
    type = action
    factory = cb
  }
  label = B2
  status = other
  response {
    transition = _fallback
    invocations = ${wrapped-node-log}
  }
  on {
    _success = ${d-node}
    # this is added, is not configured in the original graph
    _fallback = ${b2-fallback-node}
  }
}

d-node {
  id = fsdfsdfwefewrffv
  type = single
  operation {
    type = action
    factory = http
  }
  label = D
  status = unprocessed
  # no response details
}

b2-fallback-node {
  id = fsdfsdfwefewrffv
  type = single
  label = "!"
  status = missing
  # no response details
}

c-node {
  id = qe3ewfefewrfwefwef
  type = single
  operation {
    type = action
    factory = payload-to-body
  }
  label = C
  status = unprocessed
  # no response details
}

e-node {
  id = fsdfsdfwefewrffv
  type = single
  operation {
    type = action
    factory = te
  }
  label = E
  status = unprocessed
  # no response details
}

f-node {
  id = fwfwefwefewfewfdscfs
  type = single
  operation {
    type = action
    factory = te
  }
  label = F
  status = success
  transition = _success
  response {
    transition = _success
    invocations = ${simple-node-log}
  }
}

simple-node-log = [
  {
    alias = alias
    started = 123123213 # timestamp
    finished = 21342342 # timestamp
    operation = http
    logs = {
      # log entries here
    }
  }
]

wrapped-node-log = [
  {
    alias = cb-my-payments
    started = 123123213 # timestamp
    finished = 31342342 # timestamp
    operation {
      type = action
      factory = cb
    }
    logs {
      # circuit breaker log entries
    }
    invocations = [
      {
        alias = my-payments
        started = 12312312 # timestamp
        finished = 23332424 # timestamp
        operation {
          type = action
          factory = http
        }
        logs {
          # http action specific logs
          request {}
          response {
            statusCode = 500
          }
          # others
        }
      },
      {
        alias = my-payments
        started = 12312312 # timestamp
        finished = 23332424 # timestamp
        operation {
          type = action
          factory = http
        }
        logs {
          # http action specific logs
          request {}
          response {
            statusCode = 500
          }
          # others
        }
      }
    ]
  }
]